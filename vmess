#!/bin/sh
#
# VM EmptyStack Supervisor (VMESS)
# 
# Copyright (c) 2014 Andrew Yourtchenko, ayourtch@gmail.com.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom
# the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
# OR OTHER DEALINGS IN THE SOFTWARE.
#
#****************************************************************************/



VNCDEFPORT=5900
RELAYDEFINT=0

USER=`whoami`

BRCTL=`which brctl`
VCONFIG=`which vconfig`
REALPATH=`which realpath`
SOCAT=`which socat`
TUNCTL=`which tunctl`
KVM=`which kvm`
KPARTX=`which kpartx`
VMESS="$0"

if [ "$1" = "install" ]; then
  INSTALL=""
  if [ "$BRCTL" = "" ]; then
    INSTALL=$INSTALL" bridge-utils"
  fi
  if [ "$VCONFIG" = "" ]; then
    INSTALL=$INSTALL" vlan"
  fi
  if [ "$REALPATH" = "" ]; then
    INSTALL=$INSTALL" realpath"
  fi
  if [ "$SOCAT" = "" ]; then
    INSTALL=$INSTALL" socat"
  fi
  if [ "$TUNCTL" = "" ]; then
    INSTALL=$INSTALL" uml-utilities"
  fi
  if [ "$KVM" = "" ]; then
    INSTALL=$INSTALL" qemu-kvm libvirt-bin"
  fi
  if [ "$KPARTX" = "" ]; then
    INSTALL=$INSTALL" kpartx"
  fi
  if [ "$INSTALL" != "" ]; then
    echo "Installing vmess missing dependencies: $INSTALL"
    sudo apt-get install $INSTALL
  else
    echo "No missing dependency."
  fi
  exit
fi

if [ "$BRCTL" = "" -o "$VCONFIG" = "" -o "$REALPATH" = "" -o "$SOCAT" = "" -o "$TUNCTL" = "" -o "$KVM" = "" -o "$KPARTX" = "" ]; then
  echo "Missing vmess dependencies. Please run 'vmess install'."
  exit 1
fi

# Get the VM directory.
# We keep VMESS_VMDIR if set, or use ./vms, or the user vms directory.
if [ "$VMESS_VMDIR" = "" ]; then
	if [ -d "./vms" ]; then
		VMDIR=`realpath ./vms`
	else
		VMDIR=/home/${USER}/vms
	fi
else
	VMDIR=$VMESS_VMDIR
fi
# the list of regexes to match the interfaces we are not dealing with
VMESS_NET_IGNORE_FILE=$VMDIR/vmess-net-ignore

LOCKDIR="/home/${USER}/.vmess.lock"
if [ ! -d "$VMDIR" ]; then
	echo "Could not find VMDIR directory $VMDIR."
	exit 1
fi

checkvmlock() {
  mkdir ${LOCKDIR} 2>/dev/null
  RET=`ls -d ${LOCKDIR}/${VMFULLNAME} 2>/dev/null | wc -l`
}

setlock () {
  mkdir ${LOCKDIR} 2>/dev/null
  touch ${LOCKDIR}/${VMFULLNAME}
}

clearlock () {
  mkdir ${LOCKDIR} 2>/dev/null
  rm ${LOCKDIR}/${VMFULLNAME}
}

getmac () {
  HASH=`echo "$VMNAME" | md5sum | cut -c 1-6 | sed -e 's/\(..\)/\1:/g'`
  RET=`printf "02:%s%02x:%02x" $HASH $VMINST $1`
}

get_ipv6_ll () {
  INSTINTF=`printf "%02x%02x" $VMINST $1`
  RET=`echo "$VMNAME" | md5sum | cut -c 1-6 | sed -e "s/\(..\)\(..\)\(..\)/fe80::\1:\2ff:fe\3:$INSTINTF/g"`
}

getvncdisplay () {
  HEX=`echo "$VMNAME" | md5sum | cut -c 1-3` 
  DEC=`printf "%d" 0x${HEX}` 
  VNCDISPLAY=$((1+${VMINST} + (${DEC} * 10) ))
  VNCPORT=$((5900 + ${VNCDISPLAY}))
}

vmsetvars () {
VMINST=`echo $VMNAME | sed -e 's/\([0-9]\)$/.\1/g' | cut -d . -f 2`
if [ "$VMINST" = "$VMNAME" ]; then
  VMINST=0
else
  VMNAME=`echo $VMNAME | sed -e 's/\([0-9]\)$/.\1/g' | cut -d . -f 1`
fi
VMFULLNAME=${VMNAME}${VMINST}
VMDIRNAME="${VMDIR}/${VMFULLNAME}"
}


isbridge () {
  RET=`brctl show | grep -v '^\s' | tail -n +2 | awk '{ print $1; }' | grep $1 | wc -l`
}

isexist () {
  RET=`ifconfig -a | grep -v '^\s' | awk '{ print $1; }' | grep $1 | wc -l`
}

disable_ipv6 () {
  XINTF=`echo $1 | sed -e 'sX\.X/Xg'`
  sudo sysctl -w net.ipv6.conf.${XINTF}.disable_ipv6=1
}

prepareintf () {
  local USER=`whoami`
  local INTF=$1
  echo Preparing interface $INTF
  isexist ${INTF}
  if [ "0" = "$RET" ]; then
    case "${INTF}" in
      veth[A-B][0-9])
        local INTF_NUM=`echo ${INTF} | sed -e 's/veth[A-B]//g'`
        echo [${INTF}]: Virtual Ethernet link pair ${INTF_NUM} member
        sudo ip link add name vethA${INTF_NUM} type veth peer name vethB${INTF_NUM}
        disable_ipv6 vethA${INTF_NUM}
        disable_ipv6 vethB${INTF_NUM}
        sudo ifconfig vethA${INTF_NUM} up promisc
        sudo ifconfig vethB${INTF_NUM} up promisc
      ;;
      *eth[0-9].*)
	echo [${INTF}]: Ethernet sub-interface
	local INTF_MAIN=`echo ${INTF} | cut -d .  -f 1`
	local INTF_SUB=`echo ${INTF} | cut -d .  -f 2`
	sudo vconfig add ${INTF_MAIN} ${INTF_SUB}
	disable_ipv6 ${INTF}
      ;;
      vxlan[0-9A-Fa-f]*.*)
	echo [${INTF}]: VXLAN sub-interface
	local INTF_MAIN=`echo ${INTF} | cut -d .  -f 1`
	local INTF_SUB=`echo ${INTF} | cut -d .  -f 2`
        prepareintf ${INTF_MAIN}
	sudo vconfig add ${INTF_MAIN} ${INTF_SUB}
	disable_ipv6 ${INTF}
      ;;
      *eth[0-9])
	echo [${INTF}]: Ethernet interface
	disable_ipv6 ${INTF}
      ;;
      vxlan*)
	echo [${INTF}]: VXLAN main interface
        isexist ${INTF}
        if [ "0" = "$RET" ]; then
          local VXLAN_ID=`echo ${INTF} | cut -c 6-`
          sudo vxlanctl create ${VXLAN_ID}
	  disable_ipv6 ${INTF}
        fi
      ;;
      vlan*)
	echo [${INTF}]: Ethernet VLAN bridge
      ;;
      *[0-9]e[0-9])
	echo preparing a TAP interface ${INTF}
	sudo tunctl -u ${USER} -t ${INTF}
	disable_ipv6 ${INTF}
      ;;
    esac

    sudo ifconfig ${INTF} up promisc
  fi
}


cleanintf () {
  USER=`whoami`
  INTF=$1
  isexist ${INTF}
  if [ "0" = "$RET" ]; then
    echo Interface ${INTF} does not exist
  else
    sudo ifconfig ${INTF} down
    isbridge ${INTF}
    # echo IsBridge? $RET
    if [ "0" = "$RET" ]; then
      case "${INTF}" in
        *eth[0-9].*)
          echo [${INTF}]: Ethernet subinterface
          sudo vconfig rem ${INTF}
        ;;
        vxlan[0-9A-Fa-f]*.*)
	  echo [${INTF}]: VXLAN sub-interface
          sudo vconfig rem ${INTF}
        ;;
        *eth*)
          echo Ethernet!
        ;;
        vlan*)
          echo VLAN Ethernet!
        ;;
        vxlan*)
	  echo [${INTF}]: VXLAN main interface
          local VXLAN_ID=`echo ${INTF} | cut -c 6-`
          sudo vxlanctl destroy ${VXLAN_ID}
        ;;
        *)
          echo Assuming Tunnel
          sudo tunctl -d ${INTF}
        ;;
      esac
    else
      echo It is a bridge, need to delete
      sudo brctl delbr ${INTF}
    fi
  fi


}


mkvlan () {
  BRNAME=$1
  shift
  isexist ${BRNAME}
  if [ "0" = "$RET" ]; then
    echo Making a VLAN: ${BRNAME}
    sudo brctl addbr ${BRNAME}
    # we are just doing bridging, so disable IPv6 on this interface
    # unless explicitly told
    disable_ipv6 ${BRNAME}
    sudo ifconfig ${BRNAME} up promisc
  else
    echo VLAN: ${BRNAME} already exists
  fi
  for i in "$@"; do
    prepareintf $i
    sudo brctl addif ${BRNAME} $i
    if [ "1" = "$?" ]; then
      OLDBR=`$VMESS net | grep $i | awk '{ print $4; }'`
      echo "Need to remove from old bridge: $OLDBR"
      sudo brctl delif ${OLDBR} $i
      sudo brctl addif ${BRNAME} $i
    fi
  done
}


getnetconns () {
  # collect the bridge configuration in a form <bridge> <member1> <member2> ... - thus, one VLAN per line
  RET=`brctl show | awk -v "foo=$2" '{ if (NF==4) { if ((br!="") && (intf !="")) { print br,intf; }; br=$1; intf=""; if($4 ~ foo) { intf=$4; } }; if (NF==1 && ($1 ~ foo)) {intf=intf " " $1; }; }  END { if ((br!="") && (intf !="")) { print br,intf; } }'`
}

getnetconns_filtered () {
  # collect the bridge configuration in a form <bridge> <member1> <member2> ... - thus, one VLAN per line
  if [ -f "$VMESS_NET_IGNORE_FILE" ]; then
    # Take the ignored interfaces into account and exclude them from the list.
    RET=`brctl show | awk -v "foo=$2" 'BEGIN { while (getline < "'"$VMESS_NET_IGNORE_FILE"'") { ignArr[$0]=$0; } } function ign(c) { for (i in ignArr) if ( match(c,i) ) return i; return ""; }  { if (NF==4) { if ((br!="") && (intf !="")) { print br,intf; }; br=$1; intf=""; if($4 ~ foo) { intf=$4; if(ign(intf)) { intf=""; } } }; if (NF==1 && ($1 ~ foo)) {intfadd=$1 ; if(ign(intfadd)) { intfadd=""; } else { intf=intf " " intfadd; } }; }  END { if ((br!="") && (intf !="")) { print br,intf; } }'`
  else
    getnetconns
  fi
}


VMNAME=$1

if [ "$VMNAME" = "" ]; then
  echo "List of running VMs:"
  ps -ef | grep kvm | grep 127.0.0.1: | grep -v grep | sed 's/kvm .\+127.0.0.1:/-vnc :/g' | sed "s#$VMDIR/##g" | grep -v sed 
  echo 
  echo "Full list of VMs:"
  ls -ald ${VMDIR}/*[0-9] | sed "s#${VMDIR}/##g"
  echo
  echo "Use 'vmess help' for the description of other commands"
  exit
fi

if [ "$VMNAME" = "status" ]; then
  if [ -f "$VMESS_NET_IGNORE_FILE" ]; then
    VMESS_NET_IGNORE="egrep -v -f $VMESS_NET_IGNORE_FILE"
    # cat $VMESS_NET_IGNORE_FILE | sed -e 's/^/vmess net ignore /'
  else
    VMESS_NET_IGNORE="cat"
  fi

  ifconfig -a  | grep 'Link encap:' | cut -d' ' -f1 >/tmp/vmess.out
  ifconfig -a  | grep 'Link encap:' | cut -d' ' -f1 | $VMESS_NET_IGNORE | sed -e 's/^/vmess net add /'
  $VMESS net status 2>/dev/null
  VNCNUMS=`$VMESS | grep vnc | perl -ne 'if(/-vnc :([0-9]+) /) { print ":$1:"; }'`
  VMNAMES=`ls -ald ${VMDIR}/*[0-9] | sed "s#${VMDIR}/##g" | rev | cut -d' '  -f1 | rev`
  for aVM in $VMNAMES; do
    VMNAME=$aVM
    vmsetvars
    getvncdisplay
    xVNCNUMS=VNCNUMS
    if echo $VNCNUMS | egrep -q :$VNCDISPLAY:; then
      echo vmess $aVM start
    fi 
  done
  exit
fi

if [ "$VMNAME" = "help" ]; then
  cat <<_EOF_
vmess: VM Empty Stack Supervisor: A wrapper around bare-bones KVM virtual machines 
       using linux bridged networking.

Usage:

vmess top
      Run a "top" command, filtering just the KVM instances.

vmess install
      Install vmess missing dependencies.

vmess net ...
      Various operations on the bridges, as a whole.

vmess net show
      Show the current configuration of the bridge, in a form suitable 
      for feeding to the shell to recreate it back.

vmess net vlan <bridge> <intf> <intf> ...
      Add the <intf>s to the <bridge>, creating all of them if necessary.

vmess net delete <intf>
      Delete an interface.

vmess net brctl
      Output a series of brctl commands describing the current state

vmess status
      Output a series of vmess commands to recreate the current state.
      This includes networking and running VMs.

vmess <vmname> ...
      Various operations on VMs. VM should be in a form [a-z]+[0-9]

vmess <vmname> make
      create a directory for the VM

vmess <vmname> smp <N>
      Set the "-smp" parameter of KVM to <N> and store it inside the VM's dir.

vmess <vmname> ram <size>
      Set the size of RAM for the VM and store it inside the VM's dir.


vmess <vmname> hd[a|b|c|d] mount
      Tries to mount disk image partitions using kpartx and mount.
      Successfully mounted partitions appear in vms/vmname/vmname-hda.d/partX/ 
      where X is the number of the partition.

vmess <vmname> hd[a|b|c|d] umount
      Unmounts partitions mounted with the above mount command and
      cleans related directories.

vmess <vmname> hd[a|b|c|d] <size>
      Create a sparse file for the first and second disk.
      Note that because the file is created with a "seek" option of dd, 
      the subsequent invocations of the command do not delete the file,
      they only overwrite the very last byte to be zero.

vmess <vmname> cdrom <path-to-iso>
      Create a symlink to the cdrom to be used by the VM.

vmess <vmname> ifadd <N> [ <bridge> <bridge> ... ]
      Add N virtual NICs to the VM, and optionally place them into
      bridged segments. Create the segments if necessary. 
      You can use "-" as a denomination of a bridge to indicate
      you do now want this interface to be connected anywhere.
      NB: If the VM has the existing network cards, they are removed first.

vmess <vmname> ifdel
      Delete all of the VM's NICs. Called by ifadd, if there are existing NICs.

vmess <vmname> connect <ifnum> <bridge>
      Connect Nth interface (<ifnum>, starts from 0) to a specified <bridge>,
      disconnecting it from the current bridge if necessary. Somewhat redundant
      with "ifadd", but can be useful for manipulating the interfaces one by one.

vmess <vmname> ifstat
      Display the VM NICs' current connections in the syntax of a "ifadd" 
      command above.

vmess <vmname> start
      Start the VM in the background.

vmess <vmname> stop
      Stop (kill) the VM.

vmess <vmname> status
      Show the status of the VM - whether it is running or not.

vmess <vmname> info
      Show the various information about the VM, including the current full command
      line used to launch KVM.

vmess <vmname> vnc
      Start a socat instance relaying the main machine's display to the VM's vnc console.
      This socat instance serves a single connection attempt from the operator.

vmess <vmname> shared [add|del] <id> <path>
      Adds or removes a shared directory. This can be done manualy by adding or removing
      simlinks named <vmname>-fs-<id> in the vm directory.

vmess <vmname> shared fstab
      Output lines which should be added to /etc/fstab in the VM to mount the shared
      files automatically.

vmess <vmname> overlay [mount|umount]
      Inside the VMs directory, for every <vmname>-fso-<tag> and <vmname>-fsu-<tag>
      directories, an overlayfs is created and named <vmname>-fs-<tag> such that it
      uses shared with the VM. 'fsu' directory is used as underlay and 'fso' directory
      is used as overlay.

_EOF_
  exit
fi

if [ "$VMNAME" = "top" ]; then
  top -c -p $(pgrep -d',' -f "kvm ")
  exit
fi

if [ "$VMNAME" = "net" ]; then
  shift
  echo "Network connections per-segment:" >&2
  CMD=$1
  if [ "$CMD" = "" -o "$CMD" = "status" ]; then
    if [ "x$2" = "xall" ]; then
      getnetconns
    else
      getnetconns_filtered
    fi
    NETCONNS="${RET}"

    # output the commands to recreate the bridges
    echo "$NETCONNS" | sed -e "s#^#vmess net vlan #g"

    if [ "$CMD" = "status" ]; then
      # find the bridges which have IPv6 enabled, and generate commands to enable it
      echo "$NETCONNS" | awk '{ print $1; }' | xargs -n 1 ip -6 addr show | grep PROMISC | awk -F ': ' '{ print $2; }' | sed -e 'sX\.X/Xg' | sed -e 's/^\(.\{1,\}\)/sudo sysctl -w net.ipv6.conf.\1.disable_ipv6=0/g' 
    fi
  else
    shift 
  fi

  if [ "$CMD" = "vlan" ]; then
    mkvlan $1 $2 $3 $4 $5 $6 $7 $8 $9
  fi
  if [ "$CMD" = "delete" ]; then
    cleanintf $1
  fi
  if [ "$CMD" = "add" ]; then
    prepareintf $1
  fi
  if [ "$CMD" = "ignore" ]; then
    if [ -f "$VMESS_NET_IGNORE_FILE" ]; then
      fgrep -x $1 "$VMESS_NET_IGNORE_FILE" >/dev/null
      RET=$?
      if [ "0" = "$RET" ]; then
        # echo $1 already ignored >&2
        exit
      fi
    fi
    echo $1 >>$VMESS_NET_IGNORE_FILE
  fi

  if [ "$CMD" = "brctl" ]; then
    brctl show | awk '{if (NF==1) { intf=$1; }; if (NF==4) { print "sudo brctl addbr",$1; intf=$4; br=$1; }; if (NF==3) { print "sudo brctl addbr",$1; } if (NF==1 || NF==4) { print "sudo brctl addif", br, intf; } } END { if ((br!="") && (intf !="")) { print br,intf; } }'
  fi
  exit
fi

shift

vmsetvars
if [ ! -d ${VMDIRNAME} ]; then
  echo You need to create directory ${VMDIRNAME} if are serious about that VM - use vmess make
  if [ "$1" = "make" ] ; then
    echo Oh, I see you are serious. Okay, I will proceed.
  else
    exit
  fi
fi

VMNUMINTF=`ifconfig -a | grep HWaddr | grep "^${VMNAME}${VMINST}e[0-9]" | wc -l`


CMD=""
PARSEARGS=1

while [ \( ! -z "$1" \) -a \( "$PARSEARGS" = "1" \) ]; do
  ARG=$1
  shift
  case "$ARG" in
    make)
      OP="make"
      mkdir ${VMDIRNAME}
      exit
    ;;
    ifstat)
      # This scary line has 3 parts: ( collect VM's interfaces bridged; collect VM's all interfaces ) 
      # The resulting output is piped to eliminate the interfaces which appear twice, and sort the output accordingly.
      # The output is a line ready to be fed to shell
      INTFCONNS=`(brctl show | awk '{if (NF==1) { intf=$1; }; if (NF==4) { intf=$4; br=$1; }; if (NF==1 || NF==4) { printf "%40s %40s\n", intf, br; } } END { if ((br!="") && (intf !="")) { print br,intf; } }' | grep -e "${VMFULLNAME}e[0-9]"; ifconfig -a | grep HWaddr | grep "^${VMFULLNAME}e[0-9]" | awk '{ printf "%40s %40s\n",$1, "-"; }' ) | sort -s -k 1,1 | awk '{ printf "%40s %40s\n", $2, $1 }' | uniq -s 40 | cut -c 1-40 | sed -e 's/^\s\+//g' | tr '\n' ' '`
      echo "vmess $VMFULLNAME ifadd $VMNUMINTF $INTFCONNS"
    ;;
    ifadd)
      if [ "$1" = "" ]; then
        echo Missing argument
        exit
      fi
      if [ $VMNUMINTF -gt 0 ]; then 
	    $VMESS $VMFULLNAME ifdel
      fi
      VMNUMINTF=$1
      shift
      OP="intf-add"
      PARSEARGS=""
    ;;
    ifdel)
      OP="intf-del"
    ;;
    vnc)
      OP="vnc"
    ;;
    serial)
      if [ "$1" = "" ]; then
        echo Missing argument - which serial port on the target to relay ?
        exit
      fi
      TARGETRELAYPORT=$1
      shift
      OP="serial"
    ;;
    relay)
      if [ "$1" = "" ]; then
        echo Missing argument - which tcp port on the target to relay ?
        exit
      fi
      TARGETRELAYPORT=$1
      shift
      OP="relay"
    ;;
    info)
      OP="info"
    ;;
    smp)
      if [ "$1" = "" ]; then
        echo Missing argument
        exit
      fi
      OP="smp"
      SMPCOUNT=$1
      shift
      echo $SMPCOUNT >${VMDIRNAME}/SMP
    ;;
    ram)
      if [ "$1" = "" ]; then
        echo Missing argument
        exit
      fi
      OP="ram"
      RAMSIZE=$1
      shift
      echo $RAMSIZE >${VMDIRNAME}/RAM
    ;;
    compress)
      OP="$ARG"
      for disk in `ls ${VMDIRNAME}/${VMFULLNAME}-hd[abcd].img`; do
         echo "Compressing $disk"
         gzip "$disk"
      done
    ;;
    uncompress)
      for disk in hda hdb hdc hdd; do
        if [ -e ${VMDIRNAME}/${VMFULLNAME}-$disk.img.gz ]; then
          echo "Decompressing ${VMDIRNAME}/${VMFULLNAME}-$disk.img.gz"
          gzip -d "${VMDIRNAME}/${VMFULLNAME}-$disk.img.gz"
        fi
      done
    ;;
    hd[abcd])
      OP="$ARG"
      [ "$1" = "" ] && echo Missing argument && exit 1
      if [ "$1" = "mount" ]; then
        #First try to mount it directly
        mkdir -p "${VMDIRNAME}/${VMFULLNAME}-$ARG.d/part0"
        sudo mount -o loop "${VMDIRNAME}/${VMFULLNAME}-$ARG.img" "${VMDIRNAME}/${VMFULLNAME}-$ARG.d/part0" 2>/dev/null
	if [ "$?" != "0" ]; then
          rmdir "${VMDIRNAME}/${VMFULLNAME}-$ARG.d/part0" && rmdir "${VMDIRNAME}/${VMFULLNAME}-$ARG.d"
          #We first test if something bad happens. If not, proceed fluently.
          sudo $KPARTX -l "${VMDIRNAME}/${VMFULLNAME}-$ARG.img" >/dev/null
          [ "$?" != "0" ] && echo kpartx error && exit 1
          devnum="0"
          mkdir "${VMDIRNAME}/${VMFULLNAME}-$ARG.d"
          PARTS=`sudo $KPARTX -av "${VMDIRNAME}/${VMFULLNAME}-$ARG.img" | awk '{ print $3 }'`
          # fun fact: kpartx mappings are not visible immediately upon its return. Who would have thought...
          for dev in $PARTS; do
	    # wait until the device is visible
	    while [ ! -e /dev/mapper/$dev ]; do perl -e "select(undef,undef,undef,0.1);"; done
	  done
          for dev in $PARTS; do
            mkdir "${VMDIRNAME}/${VMFULLNAME}-$ARG.d/part$devnum"
            sudo mount "/dev/mapper/$dev" "${VMDIRNAME}/${VMFULLNAME}-$ARG.d/part$devnum"
            if [ "$?" != "0" ]; then
              rmdir "${VMDIRNAME}/${VMFULLNAME}-$ARG.d/part$devnum"
              echo rmdir "${VMDIRNAME}/${VMFULLNAME}-$ARG.d/part$devnum"
            fi
            devnum=`expr $devnum + 1`
          done
        fi
      elif [ "$1" = "umount" ]; then
        [ ! -d ${VMDIRNAME}/${VMFULLNAME}-$ARG.d ] && echo "Not mounted" && exit 1
        for mounted in `ls ${VMDIRNAME}/${VMFULLNAME}-$ARG.d/`; do
          sudo umount "${VMDIRNAME}/${VMFULLNAME}-$ARG.d/$mounted"
          rmdir ${VMDIRNAME}/${VMFULLNAME}-$ARG.d/$mounted
        done
        rmdir ${VMDIRNAME}/${VMFULLNAME}-$ARG.d
        sudo $KPARTX -d "${VMDIRNAME}/${VMFULLNAME}-$ARG.img"
      elif [ "$1" = "delete" ]; then
        rm ${VMDIRNAME}/${VMFULLNAME}-$ARG.img
      else
        dd if=/dev/zero of=${VMDIRNAME}/${VMFULLNAME}-$ARG.img bs=1 count=1 seek=$1
      fi
      shift
    ;;
    cdrom)
      OP="cdrom"
      if [ "$1" = "" ]; then
        echo Missing argument
        exit
      fi
      ISOPATH=`realpath $1`
      shift
      ln -s ${ISOPATH} ${VMDIRNAME}/${VMFULLNAME}-cdrom.iso
    ;;
    connect)
      OP="connect"
      if [ "$1" = "" ]; then
        echo Missing argument
        exit
      fi
      BRIDGEIFNUM=$1
      shift
      if [ "$1" = "" ]; then
        echo Need the name of the bridge
        exit
      else
        BRIDGEVLAN=$1
        shift 
      fi
    ;;
    shared)
      OP="shared"
      if [ "$1" = "add" ]; then
        [ "$2" = "" -o "$3" = "" ] && echo "Missing argument" && exit 1
        sharedfile=`realpath $3` || (echo "File do not exist" && exit 1)
	ln -s $sharedfile ${VMDIRNAME}/${VMFULLNAME}-fs-$2
        shift 3
      elif [ "$1" = "del" ]; then
        [ "$2" = "" ] && echo "Missing argument" && exit 1
        rm ${VMDIRNAME}/${VMFULLNAME}-fs-$2
        shift 2
      elif [ "$1" = "fstab" ]; then
        for dir in `ls -d ${VMDIRNAME}/${VMFULLNAME}-fs-* 2> /dev/null`; do
          dir=`echo $dir | sed "s,.*/${VMFULLNAME}-fs-\(.*$\),\1,"`
          echo "$dir   /host/$dir    9p  trans=virtio,version=9p2000.L,rw    0   0"
        done
        shift 1
      else
        echo "Invalid argument" && exit 1
      fi
    ;;
    overlay)
      OP="overlay"
      if [ "$1" = "mount" ]; then
        for dir in `ls -d ${VMDIRNAME}/${VMFULLNAME}-fslo-* 2> /dev/null`; do
          tag=`echo $dir | sed "s,.*/${VMFULLNAME}-fslo-\(.*$\),\1,"`
          [ ! -e "${VMDIRNAME}/${VMFULLNAME}-fs-$tag" ] && mkdir ${VMDIRNAME}/${VMFULLNAME}-fs-$tag
          [ ! -e "${VMDIRNAME}/${VMFULLNAME}-work-$tag" ] && mkdir ${VMDIRNAME}/${VMFULLNAME}-work-$tag
          sudo mount -t overlayfs -o lowerdir=${VMDIRNAME}/${VMFULLNAME}-fslo-$tag,workdir=${VMDIRNAME}/${VMFULLNAME}-work-$tag,upperdir=${VMDIRNAME}/${VMFULLNAME}-fsup-$tag overlayfs ${VMDIRNAME}/${VMFULLNAME}-fs-$tag
        done
        shift 1
      elif [ "$1" = "umount" ]; then
	for dir in `ls -d ${VMDIRNAME}/${VMFULLNAME}-fslo-* 2> /dev/null`; do
          tag=`echo $dir | sed "s,.*/${VMFULLNAME}-fslo-\(.*$\),\1,"`
          sudo umount ${VMDIRNAME}/${VMFULLNAME}-fs-$tag && rmdir ${VMDIRNAME}/${VMFULLNAME}-fs-$tag
        done
        shift 1
      fi
    ;;
    start)
      OP="start"
    ;;
    stop)
      OP="stop"
    ;;
    suspend)
      OP="suspend"
    ;;
    resume)
      OP="resume"
    ;;
    lock)
      setlock
      echo VM locked
      exit
    ;;
    unlock)
      echo Type "Unlock" to confirm clearing lock on this VM, or Ctrl-C to stop
      read ANSWER
      if [ "x$ANSWER" = "xUnlock" ]; then
        clearlock
        echo VM unlocked
      else
        echo Not unlocked
      fi
      exit
    ;;
    *)
      echo Usage
    ;;
  esac

done


# Lock check
checkvmlock
VMLOCKED=${RET}

if [ "x$VMLOCKED" = "x1" ]; then
  # in locked state only subset of operations is permitted
  case "$OP" in
    info)
    ;;
    vnc)
    ;;
    *)
      echo VM is locked, operation $OP not permitted.
      exit 1
    ;;
  esac
fi
# end Lock check

PRECMD=""

INTFSEQ=$((${VMNUMINTF} - 1 ))
for i in `seq 0 ${INTFSEQ}`
do
  getmac $i
  MACADDR="${RET}"
  IFNAME="${VMNAME}${VMINST}e$i"
  if [ "${OP}" = "intf-add" ]; then
    prepareintf ${IFNAME}
    if [ ! "$1" = "" ]; then
      if [ ! "$1" = "-" ]; then
        mkvlan $1 ${IFNAME}
      fi
      shift
    fi
  fi
  if [ "${OP}" = "intf-del" ]; then
    sudo tunctl -d ${IFNAME}
  fi
  if [ "${OP}" = "connect" ]; then
    if [ "$i" = "$BRIDGEIFNUM" ]; then
      BRDELIF=`$VMESS net brctl | grep ${IFNAME} | sed -e 's/addif/delif/'`
      echo $BRDELIF
      `$BRDELIF`
      echo mkvlan ${BRIDGEVLAN} ${IFNAME}
      mkvlan ${BRIDGEVLAN} ${IFNAME}
    fi
  fi
  NIC_EXARGS=`cat ${VMDIRNAME}/NIC_EXARGS 2>/dev/null`
  NIC_MODEL=`cat ${VMDIRNAME}/NIC_MODEL 2>/dev/null`
  if [ "x${NIC_MODEL}" = "x" ]; then
    NIC_MODEL="e1000"
  fi
  
  IFCFG=" -device ${NIC_MODEL},netdev=net$i,mac=${MACADDR} -netdev tap,id=net$i,ifname=${IFNAME},script=/bin/true$NIC_EXARGS"
  CMD="${CMD}${IFCFG}"
done

CMD="kvm ${CMD}"

getvncdisplay
CMD="${CMD} -vnc 127.0.0.1:${VNCDISPLAY} -monitor tcp:127.0.2.0:${VNCPORT},server,nowait -serial telnet:127.0.2.1:${VNCPORT},server,nowait "
PIDCMD="vnc 127.0.0.1:${VNCDISPLAY}"

if [ "${OP}" = "vnc" ]; then
  echo Please VNC to ${VNCDEFPORT} to connect to this VM console
  socat TCP6-LISTEN:${VNCDEFPORT},reuseaddr TCP:localhost:$VNCPORT &
fi

if [ "${OP}" = "serial" ]; then
  echo Please telnet to ${VNCDEFPORT} to connect to this VM serial ${SER_PORT}
  socat TCP6-LISTEN:${VNCDEFPORT},reuseaddr TCP:127.0.2.${TARGETRELAYPORT}:$VNCPORT &
fi

if [ "${OP}" = "relay" ]; then
  getvncdisplay
  RELAYDEFPORT=$((2200 + ${VNCDISPLAY}))
  if [ "$TARGETRELAYPORT" = "5900" ]; then
    RELAYDEFPORT=5900
  fi
  get_ipv6_ll ${RELAYDEFINT}
  IPV6LLADDR=$RET
  getnetconns
  RELAYINTF=`echo "$RET" | grep "${VMFULLNAME}e${RELAYDEFINT}" | awk '{ print $1; }'`
  if [ "x${RELAYINTF}" = "x" ]; then
    echo Could not find where the interface is bridged, will not relay
  else
    IPV6MGMTADDR=${IPV6LLADDR}%${RELAYINTF}
    echo TCP port ${RELAYDEFPORT} one-shot relay to ${IPV6MGMTADDR} port ${TARGETRELAYPORT}
    socat TCP6-LISTEN:${RELAYDEFPORT},reuseaddr TCP6:[$IPV6MGMTADDR]:${TARGETRELAYPORT} &
  fi
fi

for disk in hda hdb hdc hdd; do
  if [ -e ${VMDIRNAME}/${VMFULLNAME}-$disk.img.gz ]; then
    echo "Warning - ${VMFULLNAME}-$disk.img.gz looks like a compressed file."
    echo "You should run 'vmess ${VMFULLNAME} uncompress'"
  fi
  case $disk in
	hda)
		HDINDEX=0
	;;
	hdb)
		HDINDEX=1
	;;
	hdc)
		HDINDEX=2
	;;
	hdd)
		HDINDEX=3
	;;
  esac
  if [ -e ${VMDIRNAME}/${VMFULLNAME}-$disk.img ]; then
    # CMD="$CMD -$disk ${VMDIRNAME}/${VMFULLNAME}-$disk.img"
    CMD="$CMD -drive file=${VMDIRNAME}/${VMFULLNAME}-$disk.img,index=$HDINDEX,media=disk,format=raw"
  fi
done

if [ -e ${VMDIRNAME}/${VMFULLNAME}-cdrom.iso ]; then
  CMD="$CMD -cdrom ${VMDIRNAME}/${VMFULLNAME}-cdrom.iso"
fi

if [ -e ${VMDIRNAME}/RAM ]; then
  RAM=`cat ${VMDIRNAME}/RAM`
  CMD="$CMD -m $RAM"
fi

if [ -e ${VMDIRNAME}/SMP ]; then
  SMP=`cat ${VMDIRNAME}/SMP`
  CMD="$CMD -smp $SMP"
fi

if [ -e ${VMDIRNAME}/EXARGS ]; then
  EXARGS=`cat ${VMDIRNAME}/EXARGS`
  CMD="$CMD $EXARGS"
fi

for dir in `ls -d ${VMDIRNAME}/${VMFULLNAME}-fs-* 2> /dev/null`
do
  dir=`echo $dir | sed "s,.*/${VMFULLNAME}-fs-\(.*$\),\1,"`
  CMD="$CMD -fsdev local,security_model=none,id=fsdev_$dir,path=${VMDIRNAME}/${VMFULLNAME}-fs-$dir -device virtio-9p-pci,id=${VMFULLNAME}_$dir,fsdev=fsdev_$dir,mount_tag=$dir"
done

CMD="${CMD} -daemonize"

# echo $CMD
# echo $PIDCMD
RUNPID=`ps -ef | grep "${PIDCMD}" | grep -v grep | awk '{ print $2 }'`

if [ "$OP" = "info" ]; then
  echo Total number of interfaces: $VMNUMINTF
  echo "Command for this VM"
  echo "  $CMD"
  OP="status"
fi

if [ "$OP" = "suspend" ]; then
  if [ "$RUNPID" = "" ]; then
    echo VM not running
  else
    kill -STOP ${RUNPID}
  fi
fi

if [ "$OP" = "resume" ]; then
  if [ "$RUNPID" = "" ]; then
    echo VM not running
  else
    kill -CONT ${RUNPID}
  fi
fi

if [ "$OP" = "status" ]; then
  if [ "$RUNPID" = "" ]; then
    echo VM not running
  else
    echo VM is running, PID: $RUNPID
  fi
fi

if [ "$OP" = "start" ]; then
  echo Starting VM: "$CMD"
  sh -c "$CMD"
fi
if [ "$OP" = "stop" ]; then
  if [ ! "$RUNPID" = "" ]; then
    echo Stopping VM PID $RUNPID
    kill ${RUNPID}
  fi
fi


