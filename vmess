#!/bin/sh
#
# VM EmptyStack Supervisor (VMESS)
# 
# Copyright (c) 2014 Andrew Yourtchenko, ayourtch@gmail.com.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom
# the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
# OR OTHER DEALINGS IN THE SOFTWARE.
#
#****************************************************************************/



VNCDEFPORT=5900

USER=`whoami`
VMDIR="/home/${USER}/vms"

getmac () {
  HASH=`echo "$VMNAME" | md5sum | cut -c 1-6 | sed -e 's/\(..\)/\1:/g'`
  RET=`printf "02:%s%02x:%02x" $HASH $VMINST $1`
}

getvncdisplay () {
  HEX=`echo "$VMNAME" | md5sum | cut -c 1-3` 
  DEC=`printf "%d" 0x${HEX}` 
  VNCDISPLAY=$((1+${VMINST} + (${DEC} * 10) ))
  VNCPORT=$((5900 + ${VNCDISPLAY}))
}

vmsetvars () {
VMINST=`echo $VMNAME | sed -e 's/\([0-9]\)$/.\1/g' | cut -d . -f 2`
if [ "$VMINST" = "$VMNAME" ]; then
  VMINST=0
else
  VMNAME=`echo $VMNAME | sed -e 's/\([0-9]\)$/.\1/g' | cut -d . -f 1`
fi
VMFULLNAME=${VMNAME}${VMINST}
VMDIRNAME="${VMDIR}/${VMFULLNAME}"
}


isbridge () {
  RET=`brctl show | grep -v '^\s' | tail -n +2 | awk '{ print $1; }' | grep $1 | wc -l`
}

isexist () {
  RET=`ifconfig -a | grep -v '^\s' | awk '{ print $1; }' | grep $1 | wc -l`
}

disable_ipv6 () {
  XINTF=`echo $1 | sed -e 'sX\.X/Xg'`
  sudo sysctl -w net.ipv6.conf.${XINTF}.disable_ipv6=1
}

prepareintf () {
  local USER=`whoami`
  local INTF=$1
  echo Preparing interface $INTF
  isexist ${INTF}
  if [ "0" = "$RET" ]; then
    case "${INTF}" in
      *eth[0-9].*)
	echo [${INTF}]: Ethernet sub-interface
	local INTF_MAIN=`echo ${INTF} | cut -d .  -f 1`
	local INTF_SUB=`echo ${INTF} | cut -d .  -f 2`
	sudo vconfig add ${INTF_MAIN} ${INTF_SUB}
	disable_ipv6 ${INTF}
      ;;
      vxlan[0-9A-Fa-f]*.*)
	echo [${INTF}]: VXLAN sub-interface
	local INTF_MAIN=`echo ${INTF} | cut -d .  -f 1`
	local INTF_SUB=`echo ${INTF} | cut -d .  -f 2`
        prepareintf ${INTF_MAIN}
	sudo vconfig add ${INTF_MAIN} ${INTF_SUB}
	disable_ipv6 ${INTF}
      ;;
      *eth[0-9])
	echo [${INTF}]: Ethernet interface
	disable_ipv6 ${INTF}
      ;;
      vxlan*)
	echo [${INTF}]: VXLAN main interface
        isexist ${INTF}
        if [ "0" = "$RET" ]; then
          local VXLAN_ID=`echo ${INTF} | cut -c 6-`
          sudo vxlanctl create ${VXLAN_ID}
	  disable_ipv6 ${INTF}
        fi
      ;;
      vlan*)
	echo [${INTF}]: Ethernet VLAN bridge
      ;;
      *[0-9]e[0-9])
	echo preparing a TAP interface ${INTF}
	sudo tunctl -u ${USER} -t ${INTF}
	disable_ipv6 ${INTF}
      ;;
    esac

    sudo ifconfig ${INTF} up promisc
  fi
}


cleanintf () {
  USER=`whoami`
  INTF=$1
  isexist ${INTF}
  if [ "0" = "$RET" ]; then
    echo Interface ${INTF} does not exist
  else
    sudo ifconfig ${INTF} down
    isbridge ${INTF}
    # echo IsBridge? $RET
    if [ "0" = "$RET" ]; then
      case "${INTF}" in
        *eth[0-9].*)
          echo [${INTF}]: Ethernet subinterface
          sudo vconfig rem ${INTF}
        ;;
        vxlan[0-9A-Fa-f]*.*)
	  echo [${INTF}]: VXLAN sub-interface
          sudo vconfig rem ${INTF}
        ;;
        *eth*)
          echo Ethernet!
        ;;
        vlan*)
          echo VLAN Ethernet!
        ;;
        vxlan*)
	  echo [${INTF}]: VXLAN main interface
          local VXLAN_ID=`echo ${INTF} | cut -c 6-`
          sudo vxlanctl destroy ${VXLAN_ID}
        ;;
        *)
          echo Assuming Tunnel
          sudo tunctl -d ${INTF}
        ;;
      esac
    else
      echo It is a bridge, need to delete
      sudo brctl delbr ${INTF}
    fi
  fi


}


mkvlan () {
  BRNAME=$1
  shift
  isexist ${BRNAME}
  if [ "0" = "$RET" ]; then
    echo Making a VLAN: ${BRNAME}
    sudo brctl addbr ${BRNAME}
    # we are just doing bridging, so disable IPv6 on this interface
    # unless explicitly told
    disable_ipv6 ${BRNAME}
    sudo ifconfig ${BRNAME} up promisc
  else
    echo VLAN: ${BRNAME} already exists
  fi
  for i in "$@"; do
    prepareintf $i
    sudo brctl addif ${BRNAME} $i
    if [ "1" = "$?" ]; then
      OLDBR=`vmess net | grep $i | awk '{ print $4; }'`
      echo "Need to remove from old bridge: $OLDBR"
      sudo brctl delif ${OLDBR} $i
      sudo brctl addif ${BRNAME} $i
    fi
  done
}



VMNAME=$1

if [ "$VMNAME" = "" ]; then
  echo "List of running VMs:"
  ps -ef | grep kvm | grep 127.0.0.1: | grep -v grep | sed 's/kvm .\+127.0.0.1:/-vnc :/g' | sed "s#$VMDIR/##g" | grep -v sed 
  echo 
  echo "Full list of VMs:"
  ls -ald ${VMDIR}/*[0-9] | sed "s#${VMDIR}/##g"
  echo
  echo "Use 'vmess help' for the description of other commands"
  exit
fi

if [ "$VMNAME" = "status" ]; then
  ifconfig -a  | grep 'Link encap:' | cut -d' ' -f1 | sed -e 's/^/vmess net add /'
  vmess net 2>/dev/null | grep vmess
  VNCNUMS=`vmess | grep vnc | perl -ne 'if(/-vnc :([0-9]+) /) { print ":$1:"; }'`
  VMNAMES=`ls -ald ${VMDIR}/*[0-9] | sed "s#${VMDIR}/##g" | rev | cut -d' '  -f1 | rev`
  for aVM in $VMNAMES; do
    VMNAME=$aVM
    vmsetvars
    getvncdisplay
    xVNCNUMS=VNCNUMS
    if echo $VNCNUMS | egrep -q :$VNCDISPLAY:; then
      echo vmess $aVM start
    fi 
  done
  exit
fi

if [ "$VMNAME" = "help" ]; then
  cat <<_EOF_
vmess: VM Empty Stack Supervisor: A wrapper around bare-bones KVM virtual machines 
       using linux bridged networking.

Usage:

vmess top
      Run a "top" command, filtering just the KVM instances.

vmess net ...
      Various operations on the bridges, as a whole.

vmess net show
      Show the current configuration of the bridge, in a form suitable 
      for feeding to the shell to recreate it back.

vmess net vlan <bridge> <intf> <intf> ...
      Add the <intf>s to the <bridge>, creating all of them if necessary.

vmess net delete <intf>
      Delete an interface.

vmess net brctl
      Output a series of brctl commands describing the current state

vmess status
      Output a series of vmess commands to recreate the current state.
      This includes networking and running VMs.

vmess <vmname> ...
      Various operations on VMs. VM should be in a form [a-z]+[0-9]

vmess <vmname> make
      create a directory for the VM

vmess <vmname> smp <N>
      Set the "-smp" parameter of KVM to <N> and store it inside the VM's dir.

vmess <vmname> ram <size>
      Set the size of RAM for the VM and store it inside the VM's dir.


vmess <vmname> hda <size>
vmess <vmname> hdb <size>
      Create a sparse file for the first and second disk.
      Note that because the file is created with a "seek" option of dd, 
      the subsequent invocations of the command do not delete the file,
      they only overwrite the very last byte to be zero.

vmess <vmname> cdrom <path-to-iso>
      Create a symlink to the cdrom to be used by the VM.

vmess <vmname> ifadd <N> [ <bridge> <bridge> ... ]
      Add N virtual NICs to the VM, and optionally place them into
      bridged segments. Create the segments if necessary. 
      You can use "-" as a denomination of a bridge to indicate
      you do now want this interface to be connected anywhere.
      NB: If the VM has the existing network cards, they are removed first.

vmess <vmname> ifdel
      Delete all of the VM's NICs. Called by ifadd, if there are existing NICs.

vmess <vmname> connect <ifnum> <bridge>
      Connect Nth interface (<ifnum>, starts from 0) to a specified <bridge>,
      disconnecting it from the current bridge if necessary. Somewhat redundant
      with "ifadd", but can be useful for manipulating the interfaces one by one.

vmess <vmname> ifstat
      Display the VM NICs' current connections in the syntax of a "ifadd" 
      command above.

vmess <vmname> start
      Start the VM in the background.

vmess <vmname> stop
      Stop (kill) the VM.

vmess <vmname> status
      Show the status of the VM - whether it is running or not.

vmess <vmname> info
      Show the various information about the VM, including the current full command
      line used to launch KVM.

vmess <vmname> vnc
      Start a socat instance relaying the main machine's display to the VM's vnc console.
      This socat instance serves a single connection attempt from the operator.

_EOF_
  exit
fi

if [ "$VMNAME" = "top" ]; then
  top -c -p $(pgrep -d',' -f "kvm ")
  exit
fi

if [ "$VMNAME" = "net" ]; then
  shift
  echo "Network connections per-segment:" >&2
  CMD=$1
  if [ "$CMD" = "" ]; then
    brctl show | awk -v "foo=$2" '{ if (NF==4) { if ((br!="") && (intf !="")) { print br,intf; }; br=$1; intf=""; if($4 ~ foo) { intf=$4; } }; if (NF==1 && ($1 ~ foo)) {intf=intf " " $1; }; }  END { if ((br!="") && (intf !="")) { print br,intf; } }' | sed -e 's/^/vmess net vlan /g'
  else
    shift 
  fi

  if [ "$CMD" = "vlan" ]; then
    mkvlan $1 $2 $3 $4 $5 $6 $7 $8 $9
  fi
  if [ "$CMD" = "delete" ]; then
    cleanintf $1
  fi
  if [ "$CMD" = "add" ]; then
    prepareintf $1
  fi

  if [ "$CMD" = "brctl" ]; then
    brctl show | awk '{if (NF==1) { intf=$1; }; if (NF==4) { print "sudo brctl addbr",$1; intf=$4; br=$1; }; if (NF==3) { print "sudo brctl addbr",$1; } if (NF==1 || NF==4) { print "sudo brctl addif", br, intf; } } END { if ((br!="") && (intf !="")) { print br,intf; } }'
  fi
  exit
fi

shift

vmsetvars
if [ ! -d ${VMDIRNAME} ]; then
  echo You need to create directory ${VMDIRNAME} if are serious about that VM - use vmess make
  if [ "$1" = "make" ] ; then
    echo Oh, I see you are serious. Okay, I will proceed.
  else
    exit
  fi
fi

VMNUMINTF=`ifconfig -a | grep HWaddr | grep "^${VMNAME}${VMINST}e[0-9]" | wc -l`

REALPATH=`which realpath`
if [ "$REALPATH" = "" ]; then
  sudo apt-get install realpath
fi
SOCAT=`which socat`
if [ "$SOCAT" = "" ]; then
  sudo apt-get install socat
fi

TUNCTL=`which tunctl`
if [ "$TUNCTL" = "" ]; then
  sudo apt-get install uml-utilities
fi


CMD=""
PARSEARGS=1

while [ \( ! -z "$1" \) -a \( "$PARSEARGS" = "1" \) ]; do
  ARG=$1
  shift
  case "$ARG" in
    make)
      OP="make"
      mkdir ${VMDIRNAME}
      exit
    ;;
    ifstat)
      # This scary line has 3 parts: ( collect VM's interfaces bridged; collect VM's all interfaces ) 
      # The resulting output is piped to eliminate the interfaces which appear twice, and sort the output accordingly.
      # The output is a line ready to be fed to shell
      INTFCONNS=`(brctl show | awk '{if (NF==1) { intf=$1; }; if (NF==4) { intf=$4; br=$1; }; if (NF==1 || NF==4) { printf "%40s %40s\n", intf, br; } } END { if ((br!="") && (intf !="")) { print br,intf; } }' | grep -e "${VMFULLNAME}e[0-9]"; ifconfig -a | grep HWaddr | grep "^${VMFULLNAME}e[0-9]" | awk '{ printf "%40s %40s\n",$1, "-"; }' ) | sort -s -k 1,1 | awk '{ printf "%40s %40s\n", $2, $1 }' | uniq -s 40 | cut -c 1-40 | sed -e 's/^\s\+//g' | tr '\n' ' '`
      echo "vmess $VMFULLNAME ifadd $VMNUMINTF $INTFCONNS"
    ;;
    ifadd)
      if [ "$1" = "" ]; then
        echo Missing argument
        exit
      fi
      if [ $VMNUMINTF -gt 0 ]; then 
	vmess $VMFULLNAME ifdel
      fi
      VMNUMINTF=$1
      shift
      OP="intf-add"
      PARSEARGS=""
    ;;
    ifdel)
      OP="intf-del"
    ;;
    vnc)
      OP="vnc"
    ;;
    info)
      OP="info"
    ;;
    smp)
      if [ "$1" = "" ]; then
        echo Missing argument
        exit
      fi
      OP="smp"
      SMPCOUNT=$1
      shift
      echo $SMPCOUNT >${VMDIRNAME}/SMP
    ;;
    ram)
      if [ "$1" = "" ]; then
        echo Missing argument
        exit
      fi
      OP="ram"
      RAMSIZE=$1
      shift
      echo $RAMSIZE >${VMDIRNAME}/RAM
    ;;
    hda)
      OP="hda"
      if [ "$1" = "" ]; then
        echo Missing argument
        exit
      fi
      HDASIZE=$1
      shift
      dd if=/dev/zero of=${VMDIRNAME}/${VMFULLNAME}-hda.img bs=1 count=1 seek=${HDASIZE}
    ;;
    hdb)
      OP="hdb"
      if [ "$1" = "" ]; then
        echo Missing argument
        exit
      fi
      HDBSIZE=$1
      shift
      dd if=/dev/zero of=${VMDIRNAME}/${VMFULLNAME}-hdb.img bs=1 count=1 seek=${HDBSIZE}
    ;;
    cdrom)
      OP="cdrom"
      if [ "$1" = "" ]; then
        echo Missing argument
        exit
      fi
      ISOPATH=`realpath $1`
      shift
      ln -s ${ISOPATH} ${VMDIRNAME}/${VMFULLNAME}-cdrom.iso
    ;;
    connect)
      OP="connect"
      if [ "$1" = "" ]; then
        echo Missing argument
        exit
      fi
      BRIDGEIFNUM=$1
      shift
      if [ "$1" = "" ]; then
        echo Need the name of the bridge
        exit
      else
        BRIDGEVLAN=$1
        shift 
      fi
    ;;
   
    start)
      OP="start"
    ;;
    stop)
      OP="stop"
    ;;
    suspend)
      OP="suspend"
    ;;
    resume)
      OP="resume"
    ;;
    *)
      echo Usage
    ;;
  esac

done



PRECMD=""

INTFSEQ=$((${VMNUMINTF} - 1 ))
for i in `seq 0 ${INTFSEQ}`
do
  getmac $i
  IFNAME="${VMNAME}${VMINST}e$i"
  if [ "${OP}" = "intf-add" ]; then
    prepareintf ${IFNAME}
    if [ ! "$1" = "" ]; then
      if [ ! "$1" = "-" ]; then
        mkvlan $1 ${IFNAME}
      fi
      shift
    fi
  fi
  if [ "${OP}" = "intf-del" ]; then
    sudo tunctl -d ${IFNAME}
  fi
  if [ "${OP}" = "connect" ]; then
    if [ "$i" = "$BRIDGEIFNUM" ]; then
      BRDELIF=`vmess net brctl | grep ${IFNAME} | sed -e 's/addif/delif/'`
      echo $BRDELIF
      `$BRDELIF`
      echo mkvlan ${BRIDGEVLAN} ${IFNAME}
      mkvlan ${BRIDGEVLAN} ${IFNAME}
    fi
  fi
  IFCFG=" -net tap,vlan=$i,ifname=${IFNAME},script=/bin/true -net nic,vlan=$i,macaddr=${RET}"
  CMD="${CMD}${IFCFG}"
done

CMD="kvm ${CMD}"

getvncdisplay
CMD="${CMD} -vnc 127.0.0.1:${VNCDISPLAY}"
PIDCMD="vnc 127.0.0.1:${VNCDISPLAY}"

if [ "${OP}" = "vnc" ]; then
  echo Please VNC to ${VNCDEFPORT} to connect to this VM console
  socat TCP-LISTEN:${VNCDEFPORT},reuseaddr TCP:localhost:$VNCPORT &
fi

if [ -e ${VMDIRNAME}/${VMFULLNAME}-hda.img ]; then
  CMD="$CMD -hda ${VMDIRNAME}/${VMFULLNAME}-hda.img"
fi

if [ -e ${VMDIRNAME}/${VMFULLNAME}-hdb.img ]; then
  CMD="$CMD -hdb ${VMDIRNAME}/${VMFULLNAME}-hdb.img"
fi

if [ -e ${VMDIRNAME}/${VMFULLNAME}-cdrom.iso ]; then
  CMD="$CMD -cdrom ${VMDIRNAME}/${VMFULLNAME}-cdrom.iso"
fi

if [ -e ${VMDIRNAME}/RAM ]; then
  RAM=`cat ${VMDIRNAME}/RAM`
  CMD="$CMD -m $RAM"
fi

if [ -e ${VMDIRNAME}/SMP ]; then
  SMP=`cat ${VMDIRNAME}/SMP`
  CMD="$CMD -smp $SMP"
fi

if [ -e ${VMDIRNAME}/EXARGS ]; then
  EXARGS=`cat ${VMDIRNAME}/EXARGS`
  CMD="$CMD $EXARGS"
fi

CMD="${CMD} -daemonize"

# echo $CMD
# echo $PIDCMD
RUNPID=`ps -ef | grep "${PIDCMD}" | grep -v grep | awk '{ print $2 }'`

if [ "$OP" = "info" ]; then
  echo Total number of interfaces: $VMNUMINTF
  echo "Command for this VM"
  echo "  $CMD"
  OP="status"
fi

if [ "$OP" = "suspend" ]; then
  if [ "$RUNPID" = "" ]; then
    echo VM not running
  else
    kill -STOP ${RUNPID}
  fi
fi

if [ "$OP" = "resume" ]; then
  if [ "$RUNPID" = "" ]; then
    echo VM not running
  else
    kill -CONT ${RUNPID}
  fi
fi

if [ "$OP" = "status" ]; then
  if [ "$RUNPID" = "" ]; then
    echo VM not running
  else
    echo VM is running, PID: $RUNPID
  fi
fi

if [ "$OP" = "start" ]; then
  echo Starting VM: "$CMD"
  sh -c "$CMD"
fi
if [ "$OP" = "stop" ]; then
  if [ ! "$RUNPID" = "" ]; then
    echo Stopping VM PID $RUNPID
    kill ${RUNPID}
  fi
fi


